package com.game.fickapets;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.util.Hashtable;
import java.util.Vector;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;

import android.app.Activity;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.http.AndroidHttpClient;
import android.os.AsyncTask;
import android.util.DisplayMetrics;
import android.widget.ImageView;

/*
 * Code taken from https://github.com/koush/UrlImageViewHelper
 */

public class UrlImageViewHandler {
	/* keep track of what url each view is waiting for since listView recycles views and the urls each view is waiting
	 * for can change frequently
	 */
	private static Hashtable<ImageView, String> pendingViews = new Hashtable<ImageView, String>();
	
	
	/* Handles in-memory cacheing of images */
	private static int bytesInMemory;
	private static Hashtable<String, Drawable> downloadedImages = new Hashtable<String, Drawable>();
	private static Vector<URLEntry> downloadedImageQueue = new Vector<URLEntry>();
	private static final int MAX_BYTES_IN_MEMORY = 4096;
	
	
	
	private static Resources mResources;
	private static DisplayMetrics mMetrics;
	
	public static void setUrlDrawable(final ImageView imageView, final String url, final int defaultResource) {
		if (url == null || url.equals("") || imageView == null) {
			return;
		}
		if (downloadedImages.containsKey(url)) {
			imageView.setImageDrawable(downloadedImages.get(url));
			return;
		}
		pendingViews.put(imageView, url);
		final Drawable defaultDrawable = imageView.getResources().getDrawable(defaultResource);
		//final String imageFilename = getFilenameForUrl(url);
		imageView.setImageDrawable(defaultDrawable);
		AsyncTask<Void, Void, Bitmap> imageDownloader = new AsyncTask<Void, Void, Bitmap>() {
			@Override
			protected Bitmap doInBackground(Void...params) {
				Context context = imageView.getContext();
				AndroidHttpClient client = AndroidHttpClient.newInstance(context.getPackageName());
				try {
					HttpGet get = new HttpGet(url);
					final HttpParams httpParams = new BasicHttpParams();
					HttpClientParams.setRedirecting(httpParams, true);
					get.setParams(httpParams);
					System.out.println("Requesting this URL: " + get.getURI());
					HttpResponse response = client.execute(get);
					int status = response.getStatusLine().getStatusCode();
					if (status != HttpURLConnection.HTTP_OK) {
						return null;
					}
					HttpEntity entity = response.getEntity();
					InputStream is = entity.getContent();
					prepareResources(context);
					final Bitmap bitmap = BitmapFactory.decodeStream(is);
					return bitmap;
				} catch (Exception ex) {
					ex.printStackTrace();
					return null;
				} finally {
					client.close();
				}
			}
			
			private int getBytesInBitmap(Bitmap bitmap) {
				return bitmap.getRowBytes() * bitmap.getHeight();
			}
			

			
			@Override
			protected void onPostExecute(Bitmap bitmap) {
				final int bytes = getBytesInBitmap(bitmap);
				Drawable result = new BitmapDrawable(mResources, bitmap);

				if (result != null) {
					cacheImage(result, url, bytes);
					String pendingUrl = pendingViews.get(imageView);
					if (pendingUrl == null) return;
					Drawable imageToUse = downloadedImages.get(pendingUrl);
					pendingViews.remove(imageView);
					if (imageToUse == null) return;
					imageView.setImageDrawable(imageToUse);
				}
			}
		};
		imageDownloader.execute();
	}
	
	private static void cacheImage(Drawable image, String url, int bytes) {
		
		downloadedImages.put(url, image);
		URLEntry entry = new URLEntry(url, bytes);
		downloadedImageQueue.add(entry);
	}
	
	/* not sure what this does - just took it from the code I based this class on */
	private static void prepareResources(Context context) {
		if (mMetrics != null) {
			return;
		}
		mMetrics = new DisplayMetrics();
		
		((Activity)context).getWindowManager().getDefaultDisplay().getMetrics(mMetrics);
		AssetManager manager = context.getAssets();
		mResources = new Resources(manager, mMetrics, context.getResources().getConfiguration());
	}
	
	private static String getFilenameForUrl(final String url) {
		return "" + url.hashCode() + ".urlImage";
	}
	
	private static class URLEntry {
		String url;
		int bytes;
		public URLEntry(String url, int bytes) {
			this.url = url;
			this.bytes = bytes;
		}
;
	}
}
